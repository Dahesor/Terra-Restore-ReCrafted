use ::java::util::text::Text
use ::java::util::slot::EquipmentSlotGroup
use ::java::util::attribute::AttributeOperation
use ::mcdoc::identify::AttributeEnum
use ::mcdoc::identify::StatsEnum
use ::mcdoc::skill_sid::SkillSID

dispatch minecraft:storage["registry:main"] to struct {
    var?: any
}

dispatch minecraft:storage["registry:tooltip"] to struct {
    data?: [tooltip],
    temp?: [tooltip],
}

dispatch minecraft:storage["registry:skill"] to struct {
    data?: [SkillData],
    temp?: [RawSkill],
}

dispatch minecraft:storage["registry:weapon_type"] to struct {
    sword?: struct{
        data?: [ParsedWeaponType],
        temp?: [RawWeaponSettings],
        run?: RawWeaponSettings,
    },
    parser?: [ParsedWeaponType],
    raw?: [RawWeaponSettings],
    run?: RawWeaponSettings,
    temp?: RawWeaponSettings,
    class?: string,
    str?: string,
    adjust?: baseAdjustments,
    temp_modifier?: SimpleAttributeModifier
}

dispatch minecraft:storage["registry:prefix"] to struct {
    new?: [RawPrefix],
    data?: [Prefix],
}

struct RawSkill{
    ...SkillRegistryUnchanged,
    lore?: [registryLore],
    additional_lore?: [Text],
}

struct SkillData{
    ...SkillRegistryUnchanged,
    lore?: [Text],
    displayName?: Text,
    cd_mp_lore?: Text,
    description?: [Text],
}

struct SkillRegistryUnchanged{
    id?: int,
    sid?: SkillSID,
    mp_cost?: int @ 0..,
    /// 技能冷却时间。单位：0.1秒
    cd?: int @ 0..,
    /// 技能冷却缩减后不会小于的最小冷却时间。单位：0.1秒
    min_cd?: int @ 0..,
    /// 进入函数
    entry?: #[id="function"] string,
    flags?: [SkillFlags],
    type?: SkillTypes,
    icon?: #[id(registry="item_definition")] string
}

enum(string) SkillFlags{
    healing = "healing",
    damage = "damage",
    buff = "buff",
    debuff = "debuff",
    summon = "summon",
    movement = "movement",
    defence = "defence",
    STR = "STR",
    DEX = "DEX",
    INT = "INT",
    POW = "POW",
    CON = "CON",
    EDU = "EDU",
}

enum(string) SkillTypes{
    healing = "healing",
    damage = "damage",
    buff = "buff",
    debuff = "debuff",
    summon = "summon",
    movement = "movement",
    defence = "defence",
}

struct RawPrefix{
    id?: string,
    value?: int @ -300..300,
    rarity?: int @ -2..2,
    att_effects?:struct{
        [AttributeEnum] : PrefixEffect,
    },
    stats_effects?:struct{
        [StatsEnum] : StatsEffect,
    },
    negative?: byte @ 0..1,
    for?: [EquipmentClass]
}

struct Prefix{
    ...RawPrefix,
    displayName?: Text,
}

enum(string) EquipmentClass{
    sword = "sword",
    axe = "axe",
    bow = "bow",
    crossbow = "crossbow",
    helmet = "helmet",
    chestplate = "chestplate",
    leggings = "leggings",
    boots = "boots",
}

struct PrefixEffect{
    value?: double,
    op?: enum(string){add = "add",scale = "scale"},
}

struct StatsEffect{
    scale?: double,
    add?: int,
}

struct RawWeaponSettings{
    id?: string,
    Lore?: [registryLore],
    additional_lore?: [Text],
    adjusts?: [baseAdjustments],
    weight?: int,
    slot?: EquipmentSlotGroup
}

struct ParsedWeaponType{
    id?: string,
    lore?: [Text],
    modifiers?: [SimpleAttributeModifier],
    chance?: int @ 0..10000,
    name?: Text
}

struct tooltip{
    id?: string,
    displayName?: #[text_component] string,
    Lore?: [registryLore],
}

struct registryLore{
    with?: [
        struct{
            type?: registryLoreVar,
            ...ConstantStats,
            target?: ConstantStats
        }
    ]
}

enum(string) registryLoreVar{
    const = "const",
    stats = "stats",
    expression = "expression",
}

struct ConstantStats{
    name?: #[score_holder]string,
    stats?: StatsEnum,
    extra?: string,
}

struct baseAdjustments{
    id?: #[id="attribute"] string,
    operation?: enum(string){
	    add = "add",
	    scale = "scale",
	    set = "set"
    },
    amount?: double
}

struct SimpleAttributeModifier {
	type: #[id="attribute"] string,
	amount: double,
	operation: AttributeOperation,
}