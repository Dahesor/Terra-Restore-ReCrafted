use ::java::util::slot::SlottedItem
use ::java::world::item::ItemStack
use ::java::util::attribute::AttributeOperation
use ::java::world::entity::mob::MobBase
use ::mcdoc::playerdata::PlayerData
use ::mcdoc::playerdata::StoredPlayerEvents
use ::mcdoc::playerdata::PlayerEvent

type InventoryItem = ItemStack

dispatch minecraft:storage["sys:data"] to struct {
    player?: [PlayerData],
    events?: [StoredPlayerEvents],
    new_event?: PlayerEvent,
    tp?: [tp_data],
    test?: tp_data,
    spot?: [int] @ 3,
    item?: InventoryItem,
    itemSlot?: SlottedItem,
    Inv?: [SlottedItem<byte @ -106..106>] @ -106..106,
    Inv2?: [SlottedItem<byte @ -106..106>] @ -106..106,
    SaveInv?: [SlottedItem<byte @ -106..106>] @ -106..106,
    lore?: [#[text_component]string],
    dupe?: MobBase,
    terra?: [int @ 0..],
    mobData?: MobBase,
    Pos?: [double],
    Pos_xyz?: struct {
        x?: double,
        y?: double,
        z?: double,
    }
}

dispatch minecraft:storage["sys:loot_box"] to struct {
    data?: [box],
    test?: box,
}

struct tp_data{
    by: (enum(string){system="SYSTEM"}|int),
    at: [int] @ 3,
    valid_spots:[[int]],
    till: int @ -1..,
    region: int @ -1..,
    display?: string,
}

struct box{
    id: int,
    players?:[struct{
        UID:int,
        UUID:string,
    }],
    loot?: #[id="loot_table"] string,
    locked?: byte @ 0..1,
    tags?:[(string|enum(string){haslock = "has_lock",one_time= "one_time",reward= "reward"})],
    display:InventoryItem,
}